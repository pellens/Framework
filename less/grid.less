  //////////////////
 // Mosterd grid // for LESS: http://lesscss.org/
//////////////////

// Defaults which you can freely override
@column-width: 60;
@gutter-width: 20;
@columns: 12;
@responsive: true;

// Utility variable â€” you should never need to modify this
@gridsystem-width: (@column-width*@columns) + ((@gutter-width)*@columns) * 1px;


// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// @min-width: 960;
// @correction: 0.5 / @min-width * 100 * 1%;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	*zoom:1;
	
	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

(~".container") {
	margin-left: auto;
	margin-right: auto;
	width: @total-width;
	.clearfix; 
}

[class*='grid_'] {
  	display: inline;
	float: left;
}

.Grid (@index) when (@index > 0) {

	(~".container .grid_@{index}") {
		width: @total-width*((((@gutter-width+@column-width)*@index)-@gutter-width) / @gridsystem-width);
		margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
	}

	// next iteration
	.Grid(@index - 1);
}

// end the loop when index is 0
.Grid (0) {}

// "call" the loopingClass the first time with highest value
.Grid (@columns);

// START PUSH //
.Push (@index) when (@index > 0) {
	(~".push_@{index}") { 
		position: relative; 
		margin-left: @total-width*(((@gutter-width+@column-width)*@index) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width); 
	}
	// next iteration
	.Push(@index - 1);
}
.Push (0) {}
.Push (@columns);
// START PUSH //

// START PULL //
.Pull (@index) when (@index > 0) {
	(~".pull_@{index}") { 
		position: relative; 
		margin-right: @total-width*(((@gutter-width+@column-width)*@index) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width); 
	}
	.Pull(@index - 1);
}
.Pull (0) {}
.Pull (@columns);
// END PULL //

.alpha { margin-left: 0 !important; }
.omega { margin-right: 0 !important; }

// START MEDIA QUERRIES //
.Responsive(@responsive) when (@responsive = true) {
	 
	/* Tablet Portrait size to standard 960 (devices and browsers) */
	@media only screen and (min-width: 768px) and (max-width: 959px) {

		@total-width: 768px;

		(~".container") {
			width: @total-width;
		}

		.Grid (@index) when (@index > 0) {
			(~".container .grid_@{index}") {
				width: @total-width*((((@gutter-width+@column-width)*@index)-@gutter-width) / @gridsystem-width);
				margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
			}
			.Grid(@index - 1);
		}
		.Grid (0) {}
		.Grid (@columns);
	}

	/* All Mobile Sizes (devices and browser) */
	@media only screen and (max-width: 767px) {

		@total-width: 300px;

		(~".container") {
			width: @total-width;
		}

		.Grid (@index) when (@index > 0) {
			(~".container .grid_@{index}") {
				width: @total-width*((((@gutter-width+@column-width)*@index)-@gutter-width) / @gridsystem-width);
				margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
			}
			.Grid(@index - 1);
		}
		.Grid (0) {}
		.Grid (@columns);
	}

	/* Mobile Landscape Size to Tablet Portrait (devices and browsers) */
	@media only screen and (min-width: 480px) and (max-width: 767px) {

		@total-width: 480px;

		(~".container") {
			width: @total-width;
		}

		.Grid (@index) when (@index > 0) {
			(~".container .grid_@{index}") {
				width: @total-width*((((@gutter-width+@column-width)*@index)-@gutter-width) / @gridsystem-width);
				margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
			}
			.Grid(@index - 1);
		}
		.Grid (0) {}
		.Grid (@columns);
	}
}
.Responsive(@responsive);
// END MEDIA QUERRIES //


